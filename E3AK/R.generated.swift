//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Montserrat-Regular.ttf`.
    static let montserratRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Regular", pathExtension: "ttf")
    
    /// `bundle.url(forResource: "Montserrat-Regular", withExtension: "ttf")`
    static func montserratRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `Montserrat-Regular`.
    static let montserratRegular = Rswift.FontResource(fontName: "Montserrat-Regular")
    
    /// `UIFont(name: "Montserrat-Regular", size: ...)`
    static func montserratRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratRegular, size: size)
    }
    
    static func validate() throws {
      if R.font.montserratRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Regular' could not be loaded, is 'Montserrat-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 37 images.
  struct image {
    /// Image `Back Chevron`.
    static let backChevron = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back Chevron")
    /// Image `anxell_logo`.
    static let anxell_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "anxell_logo")
    /// Image `backup`.
    static let backup = Rswift.ImageResource(bundle: R.hostingBundle, name: "backup")
    /// Image `bluetooth`.
    static let bluetooth = Rswift.ImageResource(bundle: R.hostingBundle, name: "bluetooth")
    /// Image `btn-gray`.
    static let btnGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn-gray")
    /// Image `btn-green`.
    static let btnGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn-green")
    /// Image `checkbox-none`.
    static let checkboxNone = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox-none")
    /// Image `checkbox-tick`.
    static let checkboxTick = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox-tick")
    /// Image `disclosure Indicator`.
    static let disclosureIndicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "disclosure Indicator")
    /// Image `door-close`.
    static let doorClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "door-close")
    /// Image `door-open`.
    static let doorOpen = Rswift.ImageResource(bundle: R.hostingBundle, name: "door-open")
    /// Image `export`.
    static let export = Rswift.ImageResource(bundle: R.hostingBundle, name: "export")
    /// Image `green-dot`.
    static let greenDot = Rswift.ImageResource(bundle: R.hostingBundle, name: "green-dot")
    /// Image `history`.
    static let history = Rswift.ImageResource(bundle: R.hostingBundle, name: "history")
    /// Image `icon_email`.
    static let icon_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_email")
    /// Image `icon_version`.
    static let icon_version = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_version")
    /// Image `icon_website`.
    static let icon_website = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_website")
    /// Image `launch-screen-door`.
    static let launchScreenDoor = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch-screen-door")
    /// Image `launch-screen`.
    static let launchScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch-screen")
    /// Image `loading-green`.
    static let loadingGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "loading-green")
    /// Image `loading-white`.
    static let loadingWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "loading-white")
    /// Image `plants`.
    static let plants = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants")
    /// Image `relogin`.
    static let relogin = Rswift.ImageResource(bundle: R.hostingBundle, name: "relogin")
    /// Image `research-green`.
    static let researchGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "research-green")
    /// Image `research-white`.
    static let researchWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "research-white")
    /// Image `revert`.
    static let revert = Rswift.ImageResource(bundle: R.hostingBundle, name: "revert")
    /// Image `setup`.
    static let setup = Rswift.ImageResource(bundle: R.hostingBundle, name: "setup")
    /// Image `slid-dot-1`.
    static let slidDot1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slid-dot-1")
    /// Image `slid-dot-2`.
    static let slidDot2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slid-dot-2")
    /// Image `slid-dot-3`.
    static let slidDot3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slid-dot-3")
    /// Image `slid-dot-4`.
    static let slidDot4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slid-dot-4")
    /// Image `tick-green`.
    static let tickGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "tick-green")
    /// Image `tick-white-s`.
    static let tickWhiteS = Rswift.ImageResource(bundle: R.hostingBundle, name: "tick-white-s")
    /// Image `tick-white`.
    static let tickWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "tick-white")
    /// Image `triangle`.
    static let triangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "triangle")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")
    /// Image `users-list`.
    static let usersList = Rswift.ImageResource(bundle: R.hostingBundle, name: "users-list")
    
    /// `UIImage(named: "Back Chevron", bundle: ..., traitCollection: ...)`
    static func backChevron(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backChevron, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "anxell_logo", bundle: ..., traitCollection: ...)`
    static func anxell_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.anxell_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backup", bundle: ..., traitCollection: ...)`
    static func backup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backup, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bluetooth", bundle: ..., traitCollection: ...)`
    static func bluetooth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bluetooth, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn-gray", bundle: ..., traitCollection: ...)`
    static func btnGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnGray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn-green", bundle: ..., traitCollection: ...)`
    static func btnGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnGreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox-none", bundle: ..., traitCollection: ...)`
    static func checkboxNone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkboxNone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox-tick", bundle: ..., traitCollection: ...)`
    static func checkboxTick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkboxTick, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "disclosure Indicator", bundle: ..., traitCollection: ...)`
    static func disclosureIndicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.disclosureIndicator, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "door-close", bundle: ..., traitCollection: ...)`
    static func doorClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doorClose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "door-open", bundle: ..., traitCollection: ...)`
    static func doorOpen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doorOpen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "export", bundle: ..., traitCollection: ...)`
    static func export(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.export, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "green-dot", bundle: ..., traitCollection: ...)`
    static func greenDot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenDot, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "history", bundle: ..., traitCollection: ...)`
    static func history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.history, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_email", bundle: ..., traitCollection: ...)`
    static func icon_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_email, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_version", bundle: ..., traitCollection: ...)`
    static func icon_version(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_version, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_website", bundle: ..., traitCollection: ...)`
    static func icon_website(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_website, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch-screen", bundle: ..., traitCollection: ...)`
    static func launchScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchScreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch-screen-door", bundle: ..., traitCollection: ...)`
    static func launchScreenDoor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchScreenDoor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loading-green", bundle: ..., traitCollection: ...)`
    static func loadingGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loadingGreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loading-white", bundle: ..., traitCollection: ...)`
    static func loadingWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loadingWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "plants", bundle: ..., traitCollection: ...)`
    static func plants(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "relogin", bundle: ..., traitCollection: ...)`
    static func relogin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.relogin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "research-green", bundle: ..., traitCollection: ...)`
    static func researchGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.researchGreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "research-white", bundle: ..., traitCollection: ...)`
    static func researchWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.researchWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "revert", bundle: ..., traitCollection: ...)`
    static func revert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.revert, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "setup", bundle: ..., traitCollection: ...)`
    static func setup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setup, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "slid-dot-1", bundle: ..., traitCollection: ...)`
    static func slidDot1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slidDot1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "slid-dot-2", bundle: ..., traitCollection: ...)`
    static func slidDot2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slidDot2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "slid-dot-3", bundle: ..., traitCollection: ...)`
    static func slidDot3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slidDot3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "slid-dot-4", bundle: ..., traitCollection: ...)`
    static func slidDot4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slidDot4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tick-green", bundle: ..., traitCollection: ...)`
    static func tickGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tickGreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tick-white", bundle: ..., traitCollection: ...)`
    static func tickWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tickWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tick-white-s", bundle: ..., traitCollection: ...)`
    static func tickWhiteS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tickWhiteS, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "triangle", bundle: ..., traitCollection: ...)`
    static func triangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.triangle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "users-list", bundle: ..., traitCollection: ...)`
    static func usersList(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.usersList, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 21 nibs.
  struct nib {
    /// Nib `AboutUsViewController`.
    static let aboutUsViewController = _R.nib._AboutUsViewController()
    /// Nib `AccessTimesTableViewCell`.
    static let accessTimesTableViewCell = _R.nib._AccessTimesTableViewCell()
    /// Nib `AccessTypesViewController`.
    static let accessTypesViewController = _R.nib._AccessTypesViewController()
    /// Nib `ActivityHistoryTableViewCell`.
    static let activityHistoryTableViewCell = _R.nib._ActivityHistoryTableViewCell()
    /// Nib `ActivityHistoryViewController`.
    static let activityHistoryViewController = _R.nib._ActivityHistoryViewController()
    /// Nib `AddUserViewController`.
    static let addUserViewController = _R.nib._AddUserViewController()
    /// Nib `DatePickerTableViewCell`.
    static let datePickerTableViewCell = _R.nib._DatePickerTableViewCell()
    /// Nib `DateTableViewCell`.
    static let dateTableViewCell = _R.nib._DateTableViewCell()
    /// Nib `DeviceTimeSwitchTableViewCell`.
    static let deviceTimeSwitchTableViewCell = _R.nib._DeviceTimeSwitchTableViewCell()
    /// Nib `DeviceTimeViewController`.
    static let deviceTimeViewController = _R.nib._DeviceTimeViewController()
    /// Nib `DoorLockActionViewController`.
    static let doorLockActionViewController = _R.nib._DoorLockActionViewController()
    /// Nib `DoorRe-lockTimeViewController`.
    static let doorReLockTimeViewController = _R.nib._DoorReLockTimeViewController()
    /// Nib `Intro_AddMoreUserFooterView`.
    static let intro_AddMoreUserFooterView = _R.nib._Intro_AddMoreUserFooterView()
    /// Nib `Intro_AddMoreUserViewController`.
    static let intro_AddMoreUserViewController = _R.nib._Intro_AddMoreUserViewController()
    /// Nib `Intro_NOUsersViewController`.
    static let intro_NOUsersViewController = _R.nib._Intro_NOUsersViewController()
    /// Nib `ProximityReadRangeViewController`.
    static let proximityReadRangeViewController = _R.nib._ProximityReadRangeViewController()
    /// Nib `RepeatDateViewController`.
    static let repeatDateViewController = _R.nib._RepeatDateViewController()
    /// Nib `RepeatTableViewCell`.
    static let repeatTableViewCell = _R.nib._RepeatTableViewCell()
    /// Nib `SettingsTableViewSectionFooter`.
    static let settingsTableViewSectionFooter = _R.nib._SettingsTableViewSectionFooter()
    /// Nib `UserProximityReadRangeViewController`.
    static let userProximityReadRangeViewController = _R.nib._UserProximityReadRangeViewController()
    /// Nib `UsersTableViewCell`.
    static let usersTableViewCell = _R.nib._UsersTableViewCell()
    
    /// `UINib(name: "AboutUsViewController", in: bundle)`
    static func aboutUsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aboutUsViewController)
    }
    
    /// `UINib(name: "AccessTimesTableViewCell", in: bundle)`
    static func accessTimesTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accessTimesTableViewCell)
    }
    
    /// `UINib(name: "AccessTypesViewController", in: bundle)`
    static func accessTypesViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accessTypesViewController)
    }
    
    /// `UINib(name: "ActivityHistoryTableViewCell", in: bundle)`
    static func activityHistoryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.activityHistoryTableViewCell)
    }
    
    /// `UINib(name: "ActivityHistoryViewController", in: bundle)`
    static func activityHistoryViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.activityHistoryViewController)
    }
    
    /// `UINib(name: "AddUserViewController", in: bundle)`
    static func addUserViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addUserViewController)
    }
    
    /// `UINib(name: "DatePickerTableViewCell", in: bundle)`
    static func datePickerTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.datePickerTableViewCell)
    }
    
    /// `UINib(name: "DateTableViewCell", in: bundle)`
    static func dateTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dateTableViewCell)
    }
    
    /// `UINib(name: "DeviceTimeSwitchTableViewCell", in: bundle)`
    static func deviceTimeSwitchTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.deviceTimeSwitchTableViewCell)
    }
    
    /// `UINib(name: "DeviceTimeViewController", in: bundle)`
    static func deviceTimeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.deviceTimeViewController)
    }
    
    /// `UINib(name: "DoorLockActionViewController", in: bundle)`
    static func doorLockActionViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.doorLockActionViewController)
    }
    
    /// `UINib(name: "DoorRe-lockTimeViewController", in: bundle)`
    static func doorReLockTimeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.doorReLockTimeViewController)
    }
    
    /// `UINib(name: "Intro_AddMoreUserFooterView", in: bundle)`
    static func intro_AddMoreUserFooterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.intro_AddMoreUserFooterView)
    }
    
    /// `UINib(name: "Intro_AddMoreUserViewController", in: bundle)`
    static func intro_AddMoreUserViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.intro_AddMoreUserViewController)
    }
    
    /// `UINib(name: "Intro_NOUsersViewController", in: bundle)`
    static func intro_NOUsersViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.intro_NOUsersViewController)
    }
    
    /// `UINib(name: "ProximityReadRangeViewController", in: bundle)`
    static func proximityReadRangeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.proximityReadRangeViewController)
    }
    
    /// `UINib(name: "RepeatDateViewController", in: bundle)`
    static func repeatDateViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.repeatDateViewController)
    }
    
    /// `UINib(name: "RepeatTableViewCell", in: bundle)`
    static func repeatTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.repeatTableViewCell)
    }
    
    /// `UINib(name: "SettingsTableViewSectionFooter", in: bundle)`
    static func settingsTableViewSectionFooter(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsTableViewSectionFooter)
    }
    
    /// `UINib(name: "UserProximityReadRangeViewController", in: bundle)`
    static func userProximityReadRangeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userProximityReadRangeViewController)
    }
    
    /// `UINib(name: "UsersTableViewCell", in: bundle)`
    static func usersTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.usersTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 9 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `accessTimesCell`.
    static let accessTimesCell: Rswift.ReuseIdentifier<AccessTimesTableViewCell> = Rswift.ReuseIdentifier(identifier: "accessTimesCell")
    /// Reuse identifier `activityHistoryCell`.
    static let activityHistoryCell: Rswift.ReuseIdentifier<ActivityHistoryTableViewCell> = Rswift.ReuseIdentifier(identifier: "activityHistoryCell")
    /// Reuse identifier `dateCell`.
    static let dateCell: Rswift.ReuseIdentifier<DateTableViewCell> = Rswift.ReuseIdentifier(identifier: "dateCell")
    /// Reuse identifier `datePickerCell`.
    static let datePickerCell: Rswift.ReuseIdentifier<DatePickerTableViewCell> = Rswift.ReuseIdentifier(identifier: "datePickerCell")
    /// Reuse identifier `deviceTimeSwitchCell`.
    static let deviceTimeSwitchCell: Rswift.ReuseIdentifier<DeviceTimeSwitchTableViewCell> = Rswift.ReuseIdentifier(identifier: "deviceTimeSwitchCell")
    /// Reuse identifier `remove`.
    static let remove: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "remove")
    /// Reuse identifier `repeatCell`.
    static let repeatCell: Rswift.ReuseIdentifier<RepeatTableViewCell> = Rswift.ReuseIdentifier(identifier: "repeatCell")
    /// Reuse identifier `settingsSectionFooter`.
    static let settingsSectionFooter: Rswift.ReuseIdentifier<SettingsTableViewSectionFooter> = Rswift.ReuseIdentifier(identifier: "settingsSectionFooter")
    /// Reuse identifier `usersCell`.
    static let usersCell: Rswift.ReuseIdentifier<UsersTableViewCell> = Rswift.ReuseIdentifier(identifier: "usersCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 5 view controllers.
  struct segue {
    /// This struct is generated for `HomeViewController`, and contains static references to 1 segues.
    struct homeViewController {
      /// Segue identifier `showSettingsTableViewController`.
      static let showSettingsTableViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, SettingsTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSettingsTableViewController")
      
      /// Optionally returns a typed version of segue `showSettingsTableViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSettingsTableViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, SettingsTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.showSettingsTableViewController, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `Intro_UserViewController`, and contains static references to 1 segues.
    struct intro_UserViewController {
      /// Segue identifier `showIntro_DistanceSettingsViewController`.
      static let showIntro_DistanceSettingsViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, Intro_UserViewController, Intro_DistanceSettingsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showIntro_DistanceSettingsViewController")
      
      /// Optionally returns a typed version of segue `showIntro_DistanceSettingsViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showIntro_DistanceSettingsViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, Intro_UserViewController, Intro_DistanceSettingsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.intro_UserViewController.showIntro_DistanceSettingsViewController, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `Intro_WelcomeViewController`, and contains static references to 1 segues.
    struct intro_WelcomeViewController {
      /// Segue identifier `intro_Pass`.
      static let intro_Pass: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, Intro_WelcomeViewController, Intro_PasswordViewController> = Rswift.StoryboardSegueIdentifier(identifier: "intro_Pass")
      
      /// Optionally returns a typed version of segue `intro_Pass`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func intro_Pass(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, Intro_WelcomeViewController, Intro_PasswordViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.intro_WelcomeViewController.intro_Pass, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SettingsTableViewController`, and contains static references to 2 segues.
    struct settingsTableViewController {
      /// Segue identifier `showHistory`.
      static let showHistory: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingsTableViewController, ActivityHistoryViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showHistory")
      /// Segue identifier `showUserList`.
      static let showUserList: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingsTableViewController, UsersViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showUserList")
      
      /// Optionally returns a typed version of segue `showHistory`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showHistory(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingsTableViewController, ActivityHistoryViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingsTableViewController.showHistory, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showUserList`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showUserList(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingsTableViewController, UsersViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingsTableViewController.showUserList, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `UsersViewController`, and contains static references to 1 segues.
    struct usersViewController {
      /// Segue identifier `showUserInfoTableViewController`.
      static let showUserInfoTableViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UsersViewController, UserInfoTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showUserInfoTableViewController")
      
      /// Optionally returns a typed version of segue `showUserInfoTableViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showUserInfoTableViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UsersViewController, UserInfoTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.usersViewController.showUserInfoTableViewController, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `Intro`.
    static let intro = _R.storyboard.intro()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "Intro", bundle: ...)`
    static func intro(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.intro)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 127 localization keys.
    struct localizable {
      /// Base translation:  History List
      /// 
      /// Locales: zh-Hant, Base
      static let settings_history_list = Rswift.StringResource(key: "settings_history_list", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation:  Users List
      /// 
      /// Locales: zh-Hant, Base
      static let settings_users_manage_list = Rswift.StringResource(key: "settings_users_manage_list", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: 4~8 digits
      /// 
      /// Locales: zh-Hant, Base
      static let digits = Rswift.StringResource(key: "4~8 digits", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: About Us
      /// 
      /// Locales: zh-Hant, Base
      static let aboutUs = Rswift.StringResource(key: "About Us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Access Times
      /// 
      /// Locales: zh-Hant, Base
      static let accessTimes = Rswift.StringResource(key: "Access Times", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Access Types
      /// 
      /// Locales: zh-Hant, Base
      static let accessTypesSchedule = Rswift.StringResource(key: "Access Types/Schedule", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Activity History
      /// 
      /// Locales: zh-Hant, Base
      static let activityHistory = Rswift.StringResource(key: "Activity History", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Add
      /// 
      /// Locales: zh-Hant, Base
      static let add = Rswift.StringResource(key: "Add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Add Users
      /// 
      /// Locales: zh-Hant, Base
      static let addUsers = Rswift.StringResource(key: "Add Users", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Add more
      /// 
      /// Locales: zh-Hant, Base
      static let addMore = Rswift.StringResource(key: "Add more", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Admin Password
      /// 
      /// Locales: zh-Hant, Base
      static let settings_Admin_pwd = Rswift.StringResource(key: "settings_Admin_pwd", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Admin Password Edit
      /// 
      /// Locales: zh-Hant, Base
      static let settings_Admin_pwd_Edit = Rswift.StringResource(key: "settings_Admin_pwd_Edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Always Locked
      /// 
      /// Locales: zh-Hant, Base
      static let doorAlwaysLocked = Rswift.StringResource(key: "Door Always Locked", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Always Unlocked
      /// 
      /// Locales: zh-Hant, Base
      static let doorAlwaysUnlocked = Rswift.StringResource(key: "Door Always Unlocked", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Are you sure you want to restore this device?
      /// 
      /// Locales: zh-Hant, Base
      static let restore_check_dialog_title = Rswift.StringResource(key: "restore_check_dialog_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Auto
      /// 
      /// Locales: zh-Hant, Base
      static let auto = Rswift.StringResource(key: "Auto", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Automatic Setting
      /// 
      /// Locales: zh-Hant, Base
      static let automaticSetting = Rswift.StringResource(key: "Automatic Setting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Backup Completed!!
      /// 
      /// Locales: zh-Hant, Base
      static let backup_completed = Rswift.StringResource(key: "backup_completed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Backup Device Data
      /// 
      /// Locales: zh-Hant, Base
      static let backup_dialog_title = Rswift.StringResource(key: "backup_dialog_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Backup Done
      /// 
      /// Locales: zh-Hant, Base
      static let backupDone = Rswift.StringResource(key: "Backup Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Backup File Not Found!! Please Do Backup First!!
      /// 
      /// Locales: zh-Hant, Base
      static let restore_status_file_not_found = Rswift.StringResource(key: "restore_status_file_not_found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Backup Status
      /// 
      /// Locales: zh-Hant, Base
      static let backup_status = Rswift.StringResource(key: "backup_status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Backup all data now?
      /// 
      /// Locales: zh-Hant, Base
      static let backupAllDataNow = Rswift.StringResource(key: "Backup all data now?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Backup...
      /// 
      /// Locales: zh-Hant, Base
      static let backup_dialog_message = Rswift.StringResource(key: "backup_dialog_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: CANCEL
      /// 
      /// Locales: zh-Hant, Base
      static let progress_dialog_cancel_btn_title = Rswift.StringResource(key: "progress_dialog_cancel_btn_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Can't find device
      /// 
      /// Locales: zh-Hant, Base
      static let canTFindDevice = Rswift.StringResource(key: "Can't find device", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Cancel
      /// 
      /// Locales: zh-Hant, Base
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Current number of times:
      /// 
      /// Locales: zh-Hant, Base
      static let users_edit_access_control_dialog_type_times_mark = Rswift.StringResource(key: "users_edit_access_control_dialog_type_times_mark", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Date
      /// 
      /// Locales: zh-Hant, Base
      static let date = Rswift.StringResource(key: "Date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Delete
      /// 
      /// Locales: zh-Hant, Base
      static let delete = Rswift.StringResource(key: "Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Delete User?
      /// 
      /// Locales: zh-Hant, Base
      static let deleteUser = Rswift.StringResource(key: "Delete User?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Device Distance
      /// 
      /// Locales: zh-Hant, Base
      static let deviceDistance = Rswift.StringResource(key: "Device Distance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Device Name
      /// 
      /// Locales: zh-Hant, Base
      static let deviceName = Rswift.StringResource(key: "Device Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Device Time
      /// 
      /// Locales: zh-Hant, Base
      static let deviceTime = Rswift.StringResource(key: "Device Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Done
      /// 
      /// Locales: Base
      static let confirmDone = Rswift.StringResource(key: "Confirm Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Done
      /// 
      /// Locales: zh-Hant, Base
      static let finishDone = Rswift.StringResource(key: "Finish Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Door Lock Action
      /// 
      /// Locales: zh-Hant, Base
      static let doorLockAction = Rswift.StringResource(key: "Door Lock Action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Door Re-lock Time
      /// 
      /// Locales: zh-Hant, Base
      static let doorReLockTime = Rswift.StringResource(key: "Door Re-lock Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Door Sensor
      /// 
      /// Locales: zh-Hant, Base
      static let doorSensor = Rswift.StringResource(key: "Door Sensor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Download
      /// 
      /// Locales: zh-Hant, Base
      static let download_dialog_title = Rswift.StringResource(key: "download_dialog_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Edit Device Name
      /// 
      /// Locales: zh-Hant, Base
      static let editDeviceName = Rswift.StringResource(key: "Edit Device Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Edit Door Re-lock Time (1~1800 seconds)
      /// 
      /// Locales: zh-Hant, Base
      static let editDoorReLockTime11800Seconds = Rswift.StringResource(key: "Edit Door Re-lock Time (1~1800 seconds)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Edit ID: (16 characters)
      /// 
      /// Locales: zh-Hant, Base
      static let users_id_edit_dialog_title = Rswift.StringResource(key: "users_id_edit_dialog_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Edit Password: (4~8 digits)
      /// 
      /// Locales: zh-Hant, Base
      static let users_pwd_edit_dialog_title = Rswift.StringResource(key: "users_pwd_edit_dialog_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Enable Keypad PIN Code to Access
      /// 
      /// Locales: zh-Hant, Base
      static let enableKeypadPINCodeToAccess = Rswift.StringResource(key: "Enable Keypad PIN Code to Access", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: End
      /// 
      /// Locales: zh-Hant, Base
      static let end = Rswift.StringResource(key: "End", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Enroll
      /// 
      /// Locales: zh-Hant, Base
      static let enroll = Rswift.StringResource(key: "Enroll", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Enroll User:
      /// 
      /// Locales: zh-Hant, Base
      static let enroll_dialog_title = Rswift.StringResource(key: "enroll_dialog_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Fail
      /// 
      /// Locales: zh-Hant, Base
      static let program_fail = Rswift.StringResource(key: "program_fail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Firmware version
      /// 
      /// Locales: zh-Hant, Base
      static let settings_device_vr = Rswift.StringResource(key: "settings_device_vr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Format error!
      /// 
      /// Locales: zh-Hant, Base
      static let wrongFormat = Rswift.StringResource(key: "wrong format!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Friday
      /// 
      /// Locales: zh-Hant, Base
      static let friday = Rswift.StringResource(key: "Friday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: HIDE
      /// 
      /// Locales: zh-Hant, Base
      static let progress_dialog_hide_btn_title = Rswift.StringResource(key: "progress_dialog_hide_btn_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: ID
      /// 
      /// Locales: zh-Hant, Base
      static let iD = Rswift.StringResource(key: "ID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: ID
      /// 
      /// Locales: zh-Hant, Base
      static let userName = Rswift.StringResource(key: "User Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: ID Duplication!!
      /// 
      /// Locales: zh-Hant, Base
      static let users_manage_edit_status_duplication_name = Rswift.StringResource(key: "users_manage_edit_status_duplication_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: If you forgot your ID or password, please contact your administrator.
      /// 
      /// Locales: zh-Hant, Base
      static let ifYouForgotYourIDOrPasswordPleaseContactYourAdministrator = Rswift.StringResource(key: "If you forgot your ID or password, please contact your administrator.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Incorrect password. Please try again
      /// 
      /// Locales: zh-Hant, Base
      static let incorrectPasswordPleaseTryAgain = Rswift.StringResource(key: "Incorrect password. Please try again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Invalid ID !!
      /// 
      /// Locales: zh-Hant, Base
      static let users_manage_edit_status_Admin_name = Rswift.StringResource(key: "users_manage_edit_status_Admin_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Invalid Password!!
      /// 
      /// Locales: zh-Hant, Base
      static let users_manage_edit_status_Admin_pwd = Rswift.StringResource(key: "users_manage_edit_status_Admin_pwd", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Keypad Access
      /// 
      /// Locales: zh-Hant, Base
      static let keypadAccess = Rswift.StringResource(key: "Keypad Access", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Loading...
      /// 
      /// Locales: zh-Hant, Base
      static let download_dialog_message = Rswift.StringResource(key: "download_dialog_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Lock Action
      /// 
      /// Locales: zh-Hant, Base
      static let lockAction = Rswift.StringResource(key: "Lock Action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Monday
      /// 
      /// Locales: zh-Hant, Base
      static let monday = Rswift.StringResource(key: "Monday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Next
      /// 
      /// Locales: zh-Hant, Base
      static let next = Rswift.StringResource(key: "Next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Open
      /// 
      /// Locales: zh-Hant, Base
      static let `open` = Rswift.StringResource(key: "Open", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Password
      /// 
      /// Locales: zh-Hant, Base
      static let password = Rswift.StringResource(key: "Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Password Duplication!!
      /// 
      /// Locales: zh-Hant, Base
      static let users_manage_edit_status_duplication_password = Rswift.StringResource(key: "users_manage_edit_status_duplication_password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Password/PIN Code
      /// 
      /// Locales: zh-Hant, Base
      static let passwordPINCode = Rswift.StringResource(key: "Password/PIN Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Password/PIN Code (4~8 Digits)
      /// 
      /// Locales: zh-Hant, Base
      static let passwordPINCode48Digits = Rswift.StringResource(key: "Password/PIN Code (4~8 Digits)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Permanent
      /// 
      /// Locales: zh-Hant, Base
      static let permanent = Rswift.StringResource(key: "Permanent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Please disable 'AUTO' first!!
      /// 
      /// Locales: zh-Hant, Base
      static let aUTO_ENABLE_CONFLICT = Rswift.StringResource(key: "AUTO_ENABLE_CONFLICT", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Please enter ID
      /// 
      /// Locales: zh-Hant, Base
      static let pleaseEnterID = Rswift.StringResource(key: "Please enter ID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Please enter access times
      /// 
      /// Locales: zh-Hant, Base
      static let pleaseEnterAccessTimes = Rswift.StringResource(key: "Please enter access times", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Please enter password
      /// 
      /// Locales: zh-Hant, Base
      static let pleaseEnterPassword = Rswift.StringResource(key: "Please enter password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Please enter the number of seconds
      /// 
      /// Locales: zh-Hant, Base
      static let pleaseEnterTheNumberOfSeconds = Rswift.StringResource(key: "Please enter the number of seconds", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Please press "Next" to continue
      /// 
      /// Locales: zh-Hant, Base
      static let pleasePressNextToContinue = Rswift.StringResource(key: "Please press Next to continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Please wait a moment…
      /// 
      /// Locales: zh-Hant, Base
      static let pleaseWaitAMoment = Rswift.StringResource(key: "Please wait a moment…", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Proximity Read Range
      /// 
      /// Locales: zh-Hant, Base
      static let pleaseSettingProximityReadRange = Rswift.StringResource(key: "Please Setting Proximity Read Range", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Proximity Read Range
      /// 
      /// Locales: zh-Hant, Base
      static let proximityReadRange = Rswift.StringResource(key: "Proximity Read Range", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Proximity Read Range
      /// 
      /// Locales: zh-Hant, Base
      static let proximityReadRangeSettings = Rswift.StringResource(key: "Proximity Read Range Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Recurrent
      /// 
      /// Locales: zh-Hant, Base
      static let recurrent = Rswift.StringResource(key: "Recurrent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Repeat
      /// 
      /// Locales: zh-Hant, Base
      static let `repeat` = Rswift.StringResource(key: "Repeat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Repeat
      /// 
      /// Locales: zh-Hant, Base
      static let repeatSelect = Rswift.StringResource(key: "Repeat Select", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Restore
      /// 
      /// Locales: zh-Hant, Base
      static let restore = Rswift.StringResource(key: "Restore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Restore Completed!
      /// 
      /// Locales: zh-Hant, Base
      static let restore_completed = Rswift.StringResource(key: "restore_completed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Restore Device Data
      /// 
      /// Locales: zh-Hant, Base
      static let restore_dialog_title = Rswift.StringResource(key: "restore_dialog_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Restore Done
      /// 
      /// Locales: zh-Hant, Base
      static let restoreDone = Rswift.StringResource(key: "Restore Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Restore Status
      /// 
      /// Locales: zh-Hant, Base
      static let restore_status = Rswift.StringResource(key: "restore_status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Restore all data now?
      /// 
      /// Locales: zh-Hant, Base
      static let restoreAllDataNow = Rswift.StringResource(key: "Restore all data now?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Restoring...
      /// 
      /// Locales: zh-Hant, Base
      static let restore_dialog_message = Rswift.StringResource(key: "restore_dialog_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Restoring…
      /// 
      /// Locales: zh-Hant, Base
      static let restoring = Rswift.StringResource(key: "Restoring…", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Saturday
      /// 
      /// Locales: zh-Hant, Base
      static let saturday = Rswift.StringResource(key: "Saturday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Schedule
      /// 
      /// Locales: zh-Hant, Base
      static let schedule = Rswift.StringResource(key: "Schedule", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Search
      /// 
      /// Locales: zh-Hant, Base
      static let search = Rswift.StringResource(key: "Search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Search result
      /// 
      /// Locales: zh-Hant, Base
      static let searchResult = Rswift.StringResource(key: "Search result", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Sec.
      /// 
      /// Locales: zh-Hant, Base
      static let sec = Rswift.StringResource(key: "Sec.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Settings
      /// 
      /// Locales: zh-Hant, Base
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Skip
      /// 
      /// Locales: zh-Hant, Base
      static let skip = Rswift.StringResource(key: "Skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Start
      /// 
      /// Locales: zh-Hant, Base
      static let start = Rswift.StringResource(key: "Start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Sucess
      /// 
      /// Locales: zh-Hant, Base
      static let program_success = Rswift.StringResource(key: "program_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Sunday
      /// 
      /// Locales: zh-Hant, Base
      static let sunday = Rswift.StringResource(key: "Sunday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: System busy!!
      /// 
      /// Locales: zh-Hant, Base
      static let users_manage_edit_status_busy = Rswift.StringResource(key: "users_manage_edit_status_busy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: TYPES
      /// 
      /// Locales: zh-Hant, Base
      static let tYPES = Rswift.StringResource(key: "TYPES", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Tamper Sensor
      /// 
      /// Locales: zh-Hant, Base
      static let tamperSensor = Rswift.StringResource(key: "Tamper Sensor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: There's no users, add now?
      /// 
      /// Locales: zh-Hant, Base
      static let thereSNoUsersAddNow = Rswift.StringResource(key: "There's no users, add now?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Thursday
      /// 
      /// Locales: zh-Hant, Base
      static let thursday = Rswift.StringResource(key: "Thursday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Time
      /// 
      /// Locales: zh-Hant, Base
      static let timeIn = Rswift.StringResource(key: "Time in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Tuesday
      /// 
      /// Locales: zh-Hant, Base
      static let tuesday = Rswift.StringResource(key: "Tuesday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Up to 16 characters
      /// 
      /// Locales: zh-Hant, Base
      static let pleaseProvideUpTo16Characters = Rswift.StringResource(key: "Please Provide Up to 16 characters", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Up to 16 characters
      /// 
      /// Locales: zh-Hant, Base
      static let upTo16Characters = Rswift.StringResource(key: "Up to 16 characters", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Use Re-lock Time
      /// 
      /// Locales: zh-Hant, Base
      static let useReLockTime = Rswift.StringResource(key: "Use Re-lock Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: User Info
      /// 
      /// Locales: zh-Hant, Base
      static let userInfo = Rswift.StringResource(key: "User Info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Users
      /// 
      /// Locales: zh-Hant, Base
      static let users = Rswift.StringResource(key: "Users", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Wednesday
      /// 
      /// Locales: zh-Hant, Base
      static let wednesday = Rswift.StringResource(key: "Wednesday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Welcome
      /// 
      /// Locales: zh-Hant, Base
      static let welcome = Rswift.StringResource(key: "Welcome", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: You can find default password from the manual. Please change your Admin password for security control.
      /// 
      /// Locales: zh-Hant, Base
      static let youCanFindDefaultPasswordFromTheManualPleaseChangeYourAdminPasswordForSecurityControl = Rswift.StringResource(key: "You can find default password from the manual. Please change your Admin password for security control.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: You must connect to a Bluetooth device to set up
      /// 
      /// Locales: zh-Hant, Base
      static let youMustConnectToABluetoothDeviceToSetUp = Rswift.StringResource(key: "You must connect to a Bluetooth device to set up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: Your ID
      /// 
      /// Locales: zh-Hant, Base
      static let yourID = Rswift.StringResource(key: "Your ID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: [FRI]
      /// 
      /// Locales: zh-Hant, Base
      static let weekly_Fri = Rswift.StringResource(key: "weekly_Fri", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: [MON]
      /// 
      /// Locales: zh-Hant, Base
      static let weekly_Mon = Rswift.StringResource(key: "weekly_Mon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: [SAT]
      /// 
      /// Locales: zh-Hant, Base
      static let weekly_Sat = Rswift.StringResource(key: "weekly_Sat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: [SUN]
      /// 
      /// Locales: zh-Hant, Base
      static let weekly_Sun = Rswift.StringResource(key: "weekly_Sun", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: [THU]
      /// 
      /// Locales: zh-Hant, Base
      static let weekly_Thu = Rswift.StringResource(key: "weekly_Thu", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: [TUE]
      /// 
      /// Locales: zh-Hant, Base
      static let weekly_Tue = Rswift.StringResource(key: "weekly_Tue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: [WED]
      /// 
      /// Locales: zh-Hant, Base
      static let weekly_Wed = Rswift.StringResource(key: "weekly_Wed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      /// Base translation: please try later
      /// 
      /// Locales: zh-Hant, Base
      static let pleaseTryLater = Rswift.StringResource(key: "please try later", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hant", "Base"], comment: nil)
      
      /// Base translation:  History List
      /// 
      /// Locales: zh-Hant, Base
      static func settings_history_list(_: Void = ()) -> String {
        return NSLocalizedString("settings_history_list", bundle: R.hostingBundle, value: " History List", comment: "")
      }
      
      /// Base translation:  Users List
      /// 
      /// Locales: zh-Hant, Base
      static func settings_users_manage_list(_: Void = ()) -> String {
        return NSLocalizedString("settings_users_manage_list", bundle: R.hostingBundle, value: " Users List", comment: "")
      }
      
      /// Base translation: 4~8 digits
      /// 
      /// Locales: zh-Hant, Base
      static func digits(_: Void = ()) -> String {
        return NSLocalizedString("4~8 digits", bundle: R.hostingBundle, value: "4~8 digits", comment: "")
      }
      
      /// Base translation: About Us
      /// 
      /// Locales: zh-Hant, Base
      static func aboutUs(_: Void = ()) -> String {
        return NSLocalizedString("About Us", bundle: R.hostingBundle, value: "About Us", comment: "")
      }
      
      /// Base translation: Access Times
      /// 
      /// Locales: zh-Hant, Base
      static func accessTimes(_: Void = ()) -> String {
        return NSLocalizedString("Access Times", bundle: R.hostingBundle, value: "Access Times", comment: "")
      }
      
      /// Base translation: Access Types
      /// 
      /// Locales: zh-Hant, Base
      static func accessTypesSchedule(_: Void = ()) -> String {
        return NSLocalizedString("Access Types/Schedule", bundle: R.hostingBundle, value: "Access Types", comment: "")
      }
      
      /// Base translation: Activity History
      /// 
      /// Locales: zh-Hant, Base
      static func activityHistory(_: Void = ()) -> String {
        return NSLocalizedString("Activity History", bundle: R.hostingBundle, value: "Activity History", comment: "")
      }
      
      /// Base translation: Add
      /// 
      /// Locales: zh-Hant, Base
      static func add(_: Void = ()) -> String {
        return NSLocalizedString("Add", bundle: R.hostingBundle, value: "Add", comment: "")
      }
      
      /// Base translation: Add Users
      /// 
      /// Locales: zh-Hant, Base
      static func addUsers(_: Void = ()) -> String {
        return NSLocalizedString("Add Users", bundle: R.hostingBundle, value: "Add Users", comment: "")
      }
      
      /// Base translation: Add more
      /// 
      /// Locales: zh-Hant, Base
      static func addMore(_: Void = ()) -> String {
        return NSLocalizedString("Add more", bundle: R.hostingBundle, value: "Add more", comment: "")
      }
      
      /// Base translation: Admin Password
      /// 
      /// Locales: zh-Hant, Base
      static func settings_Admin_pwd(_: Void = ()) -> String {
        return NSLocalizedString("settings_Admin_pwd", bundle: R.hostingBundle, value: "Admin Password", comment: "")
      }
      
      /// Base translation: Admin Password Edit
      /// 
      /// Locales: zh-Hant, Base
      static func settings_Admin_pwd_Edit(_: Void = ()) -> String {
        return NSLocalizedString("settings_Admin_pwd_Edit", bundle: R.hostingBundle, value: "Admin Password Edit", comment: "")
      }
      
      /// Base translation: Always Locked
      /// 
      /// Locales: zh-Hant, Base
      static func doorAlwaysLocked(_: Void = ()) -> String {
        return NSLocalizedString("Door Always Locked", bundle: R.hostingBundle, value: "Always Locked", comment: "")
      }
      
      /// Base translation: Always Unlocked
      /// 
      /// Locales: zh-Hant, Base
      static func doorAlwaysUnlocked(_: Void = ()) -> String {
        return NSLocalizedString("Door Always Unlocked", bundle: R.hostingBundle, value: "Always Unlocked", comment: "")
      }
      
      /// Base translation: Are you sure you want to restore this device?
      /// 
      /// Locales: zh-Hant, Base
      static func restore_check_dialog_title(_: Void = ()) -> String {
        return NSLocalizedString("restore_check_dialog_title", bundle: R.hostingBundle, value: "Are you sure you want to restore this device?", comment: "")
      }
      
      /// Base translation: Auto
      /// 
      /// Locales: zh-Hant, Base
      static func auto(_: Void = ()) -> String {
        return NSLocalizedString("Auto", bundle: R.hostingBundle, value: "Auto", comment: "")
      }
      
      /// Base translation: Automatic Setting
      /// 
      /// Locales: zh-Hant, Base
      static func automaticSetting(_: Void = ()) -> String {
        return NSLocalizedString("Automatic Setting", bundle: R.hostingBundle, value: "Automatic Setting", comment: "")
      }
      
      /// Base translation: Backup Completed!!
      /// 
      /// Locales: zh-Hant, Base
      static func backup_completed(_: Void = ()) -> String {
        return NSLocalizedString("backup_completed", bundle: R.hostingBundle, value: "Backup Completed!!", comment: "")
      }
      
      /// Base translation: Backup Device Data
      /// 
      /// Locales: zh-Hant, Base
      static func backup_dialog_title(_: Void = ()) -> String {
        return NSLocalizedString("backup_dialog_title", bundle: R.hostingBundle, value: "Backup Device Data", comment: "")
      }
      
      /// Base translation: Backup Done
      /// 
      /// Locales: zh-Hant, Base
      static func backupDone(_: Void = ()) -> String {
        return NSLocalizedString("Backup Done", bundle: R.hostingBundle, value: "Backup Done", comment: "")
      }
      
      /// Base translation: Backup File Not Found!! Please Do Backup First!!
      /// 
      /// Locales: zh-Hant, Base
      static func restore_status_file_not_found(_: Void = ()) -> String {
        return NSLocalizedString("restore_status_file_not_found", bundle: R.hostingBundle, value: "Backup File Not Found!! Please Do Backup First!!", comment: "")
      }
      
      /// Base translation: Backup Status
      /// 
      /// Locales: zh-Hant, Base
      static func backup_status(_: Void = ()) -> String {
        return NSLocalizedString("backup_status", bundle: R.hostingBundle, value: "Backup Status", comment: "")
      }
      
      /// Base translation: Backup all data now?
      /// 
      /// Locales: zh-Hant, Base
      static func backupAllDataNow(_: Void = ()) -> String {
        return NSLocalizedString("Backup all data now?", bundle: R.hostingBundle, value: "Backup all data now?", comment: "")
      }
      
      /// Base translation: Backup...
      /// 
      /// Locales: zh-Hant, Base
      static func backup_dialog_message(_: Void = ()) -> String {
        return NSLocalizedString("backup_dialog_message", bundle: R.hostingBundle, value: "Backup...", comment: "")
      }
      
      /// Base translation: CANCEL
      /// 
      /// Locales: zh-Hant, Base
      static func progress_dialog_cancel_btn_title(_: Void = ()) -> String {
        return NSLocalizedString("progress_dialog_cancel_btn_title", bundle: R.hostingBundle, value: "CANCEL", comment: "")
      }
      
      /// Base translation: Can't find device
      /// 
      /// Locales: zh-Hant, Base
      static func canTFindDevice(_: Void = ()) -> String {
        return NSLocalizedString("Can't find device", bundle: R.hostingBundle, value: "Can't find device", comment: "")
      }
      
      /// Base translation: Cancel
      /// 
      /// Locales: zh-Hant, Base
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", bundle: R.hostingBundle, value: "Cancel", comment: "")
      }
      
      /// Base translation: Current number of times:
      /// 
      /// Locales: zh-Hant, Base
      static func users_edit_access_control_dialog_type_times_mark(_: Void = ()) -> String {
        return NSLocalizedString("users_edit_access_control_dialog_type_times_mark", bundle: R.hostingBundle, value: "Current number of times:", comment: "")
      }
      
      /// Base translation: Date
      /// 
      /// Locales: zh-Hant, Base
      static func date(_: Void = ()) -> String {
        return NSLocalizedString("Date", bundle: R.hostingBundle, value: "Date", comment: "")
      }
      
      /// Base translation: Delete
      /// 
      /// Locales: zh-Hant, Base
      static func delete(_: Void = ()) -> String {
        return NSLocalizedString("Delete", bundle: R.hostingBundle, value: "Delete", comment: "")
      }
      
      /// Base translation: Delete User?
      /// 
      /// Locales: zh-Hant, Base
      static func deleteUser(_: Void = ()) -> String {
        return NSLocalizedString("Delete User?", bundle: R.hostingBundle, value: "Delete User?", comment: "")
      }
      
      /// Base translation: Device Distance
      /// 
      /// Locales: zh-Hant, Base
      static func deviceDistance(_: Void = ()) -> String {
        return NSLocalizedString("Device Distance", bundle: R.hostingBundle, value: "Device Distance", comment: "")
      }
      
      /// Base translation: Device Name
      /// 
      /// Locales: zh-Hant, Base
      static func deviceName(_: Void = ()) -> String {
        return NSLocalizedString("Device Name", bundle: R.hostingBundle, value: "Device Name", comment: "")
      }
      
      /// Base translation: Device Time
      /// 
      /// Locales: zh-Hant, Base
      static func deviceTime(_: Void = ()) -> String {
        return NSLocalizedString("Device Time", bundle: R.hostingBundle, value: "Device Time", comment: "")
      }
      
      /// Base translation: Done
      /// 
      /// Locales: Base
      static func confirmDone(_: Void = ()) -> String {
        return NSLocalizedString("Confirm Done", bundle: R.hostingBundle, value: "Done", comment: "")
      }
      
      /// Base translation: Done
      /// 
      /// Locales: zh-Hant, Base
      static func finishDone(_: Void = ()) -> String {
        return NSLocalizedString("Finish Done", bundle: R.hostingBundle, value: "Done", comment: "")
      }
      
      /// Base translation: Door Lock Action
      /// 
      /// Locales: zh-Hant, Base
      static func doorLockAction(_: Void = ()) -> String {
        return NSLocalizedString("Door Lock Action", bundle: R.hostingBundle, value: "Door Lock Action", comment: "")
      }
      
      /// Base translation: Door Re-lock Time
      /// 
      /// Locales: zh-Hant, Base
      static func doorReLockTime(_: Void = ()) -> String {
        return NSLocalizedString("Door Re-lock Time", bundle: R.hostingBundle, value: "Door Re-lock Time", comment: "")
      }
      
      /// Base translation: Door Sensor
      /// 
      /// Locales: zh-Hant, Base
      static func doorSensor(_: Void = ()) -> String {
        return NSLocalizedString("Door Sensor", bundle: R.hostingBundle, value: "Door Sensor", comment: "")
      }
      
      /// Base translation: Download
      /// 
      /// Locales: zh-Hant, Base
      static func download_dialog_title(_: Void = ()) -> String {
        return NSLocalizedString("download_dialog_title", bundle: R.hostingBundle, value: "Download", comment: "")
      }
      
      /// Base translation: Edit Device Name
      /// 
      /// Locales: zh-Hant, Base
      static func editDeviceName(_: Void = ()) -> String {
        return NSLocalizedString("Edit Device Name", bundle: R.hostingBundle, value: "Edit Device Name", comment: "")
      }
      
      /// Base translation: Edit Door Re-lock Time (1~1800 seconds)
      /// 
      /// Locales: zh-Hant, Base
      static func editDoorReLockTime11800Seconds(_: Void = ()) -> String {
        return NSLocalizedString("Edit Door Re-lock Time (1~1800 seconds)", bundle: R.hostingBundle, value: "Edit Door Re-lock Time (1~1800 seconds)", comment: "")
      }
      
      /// Base translation: Edit ID: (16 characters)
      /// 
      /// Locales: zh-Hant, Base
      static func users_id_edit_dialog_title(_: Void = ()) -> String {
        return NSLocalizedString("users_id_edit_dialog_title", bundle: R.hostingBundle, value: "Edit ID: (16 characters)", comment: "")
      }
      
      /// Base translation: Edit Password: (4~8 digits)
      /// 
      /// Locales: zh-Hant, Base
      static func users_pwd_edit_dialog_title(_: Void = ()) -> String {
        return NSLocalizedString("users_pwd_edit_dialog_title", bundle: R.hostingBundle, value: "Edit Password: (4~8 digits)", comment: "")
      }
      
      /// Base translation: Enable Keypad PIN Code to Access
      /// 
      /// Locales: zh-Hant, Base
      static func enableKeypadPINCodeToAccess(_: Void = ()) -> String {
        return NSLocalizedString("Enable Keypad PIN Code to Access", bundle: R.hostingBundle, value: "Enable Keypad PIN Code to Access", comment: "")
      }
      
      /// Base translation: End
      /// 
      /// Locales: zh-Hant, Base
      static func end(_: Void = ()) -> String {
        return NSLocalizedString("End", bundle: R.hostingBundle, value: "End", comment: "")
      }
      
      /// Base translation: Enroll
      /// 
      /// Locales: zh-Hant, Base
      static func enroll(_: Void = ()) -> String {
        return NSLocalizedString("Enroll", bundle: R.hostingBundle, value: "Enroll", comment: "")
      }
      
      /// Base translation: Enroll User:
      /// 
      /// Locales: zh-Hant, Base
      static func enroll_dialog_title(_: Void = ()) -> String {
        return NSLocalizedString("enroll_dialog_title", bundle: R.hostingBundle, value: "Enroll User:", comment: "")
      }
      
      /// Base translation: Fail
      /// 
      /// Locales: zh-Hant, Base
      static func program_fail(_: Void = ()) -> String {
        return NSLocalizedString("program_fail", bundle: R.hostingBundle, value: "Fail", comment: "")
      }
      
      /// Base translation: Firmware version
      /// 
      /// Locales: zh-Hant, Base
      static func settings_device_vr(_: Void = ()) -> String {
        return NSLocalizedString("settings_device_vr", bundle: R.hostingBundle, value: "Firmware version", comment: "")
      }
      
      /// Base translation: Format error!
      /// 
      /// Locales: zh-Hant, Base
      static func wrongFormat(_: Void = ()) -> String {
        return NSLocalizedString("wrong format!", bundle: R.hostingBundle, value: "Format error!", comment: "")
      }
      
      /// Base translation: Friday
      /// 
      /// Locales: zh-Hant, Base
      static func friday(_: Void = ()) -> String {
        return NSLocalizedString("Friday", bundle: R.hostingBundle, value: "Friday", comment: "")
      }
      
      /// Base translation: HIDE
      /// 
      /// Locales: zh-Hant, Base
      static func progress_dialog_hide_btn_title(_: Void = ()) -> String {
        return NSLocalizedString("progress_dialog_hide_btn_title", bundle: R.hostingBundle, value: "HIDE", comment: "")
      }
      
      /// Base translation: ID
      /// 
      /// Locales: zh-Hant, Base
      static func iD(_: Void = ()) -> String {
        return NSLocalizedString("ID", bundle: R.hostingBundle, value: "ID", comment: "")
      }
      
      /// Base translation: ID
      /// 
      /// Locales: zh-Hant, Base
      static func userName(_: Void = ()) -> String {
        return NSLocalizedString("User Name", bundle: R.hostingBundle, value: "ID", comment: "")
      }
      
      /// Base translation: ID Duplication!!
      /// 
      /// Locales: zh-Hant, Base
      static func users_manage_edit_status_duplication_name(_: Void = ()) -> String {
        return NSLocalizedString("users_manage_edit_status_duplication_name", bundle: R.hostingBundle, value: "ID Duplication!!", comment: "")
      }
      
      /// Base translation: If you forgot your ID or password, please contact your administrator.
      /// 
      /// Locales: zh-Hant, Base
      static func ifYouForgotYourIDOrPasswordPleaseContactYourAdministrator(_: Void = ()) -> String {
        return NSLocalizedString("If you forgot your ID or password, please contact your administrator.", bundle: R.hostingBundle, value: "If you forgot your ID or password, please contact your administrator.", comment: "")
      }
      
      /// Base translation: Incorrect password. Please try again
      /// 
      /// Locales: zh-Hant, Base
      static func incorrectPasswordPleaseTryAgain(_: Void = ()) -> String {
        return NSLocalizedString("Incorrect password. Please try again", bundle: R.hostingBundle, value: "Incorrect password. Please try again", comment: "")
      }
      
      /// Base translation: Invalid ID !!
      /// 
      /// Locales: zh-Hant, Base
      static func users_manage_edit_status_Admin_name(_: Void = ()) -> String {
        return NSLocalizedString("users_manage_edit_status_Admin_name", bundle: R.hostingBundle, value: "Invalid ID !!", comment: "")
      }
      
      /// Base translation: Invalid Password!!
      /// 
      /// Locales: zh-Hant, Base
      static func users_manage_edit_status_Admin_pwd(_: Void = ()) -> String {
        return NSLocalizedString("users_manage_edit_status_Admin_pwd", bundle: R.hostingBundle, value: "Invalid Password!!", comment: "")
      }
      
      /// Base translation: Keypad Access
      /// 
      /// Locales: zh-Hant, Base
      static func keypadAccess(_: Void = ()) -> String {
        return NSLocalizedString("Keypad Access", bundle: R.hostingBundle, value: "Keypad Access", comment: "")
      }
      
      /// Base translation: Loading...
      /// 
      /// Locales: zh-Hant, Base
      static func download_dialog_message(_: Void = ()) -> String {
        return NSLocalizedString("download_dialog_message", bundle: R.hostingBundle, value: "Loading...", comment: "")
      }
      
      /// Base translation: Lock Action
      /// 
      /// Locales: zh-Hant, Base
      static func lockAction(_: Void = ()) -> String {
        return NSLocalizedString("Lock Action", bundle: R.hostingBundle, value: "Lock Action", comment: "")
      }
      
      /// Base translation: Monday
      /// 
      /// Locales: zh-Hant, Base
      static func monday(_: Void = ()) -> String {
        return NSLocalizedString("Monday", bundle: R.hostingBundle, value: "Monday", comment: "")
      }
      
      /// Base translation: Next
      /// 
      /// Locales: zh-Hant, Base
      static func next(_: Void = ()) -> String {
        return NSLocalizedString("Next", bundle: R.hostingBundle, value: "Next", comment: "")
      }
      
      /// Base translation: Open
      /// 
      /// Locales: zh-Hant, Base
      static func `open`(_: Void = ()) -> String {
        return NSLocalizedString("Open", bundle: R.hostingBundle, value: "Open", comment: "")
      }
      
      /// Base translation: Password
      /// 
      /// Locales: zh-Hant, Base
      static func password(_: Void = ()) -> String {
        return NSLocalizedString("Password", bundle: R.hostingBundle, value: "Password", comment: "")
      }
      
      /// Base translation: Password Duplication!!
      /// 
      /// Locales: zh-Hant, Base
      static func users_manage_edit_status_duplication_password(_: Void = ()) -> String {
        return NSLocalizedString("users_manage_edit_status_duplication_password", bundle: R.hostingBundle, value: "Password Duplication!!", comment: "")
      }
      
      /// Base translation: Password/PIN Code
      /// 
      /// Locales: zh-Hant, Base
      static func passwordPINCode(_: Void = ()) -> String {
        return NSLocalizedString("Password/PIN Code", bundle: R.hostingBundle, value: "Password/PIN Code", comment: "")
      }
      
      /// Base translation: Password/PIN Code (4~8 Digits)
      /// 
      /// Locales: zh-Hant, Base
      static func passwordPINCode48Digits(_: Void = ()) -> String {
        return NSLocalizedString("Password/PIN Code (4~8 Digits)", bundle: R.hostingBundle, value: "Password/PIN Code (4~8 Digits)", comment: "")
      }
      
      /// Base translation: Permanent
      /// 
      /// Locales: zh-Hant, Base
      static func permanent(_: Void = ()) -> String {
        return NSLocalizedString("Permanent", bundle: R.hostingBundle, value: "Permanent", comment: "")
      }
      
      /// Base translation: Please disable 'AUTO' first!!
      /// 
      /// Locales: zh-Hant, Base
      static func aUTO_ENABLE_CONFLICT(_: Void = ()) -> String {
        return NSLocalizedString("AUTO_ENABLE_CONFLICT", bundle: R.hostingBundle, value: "Please disable 'AUTO' first!!", comment: "")
      }
      
      /// Base translation: Please enter ID
      /// 
      /// Locales: zh-Hant, Base
      static func pleaseEnterID(_: Void = ()) -> String {
        return NSLocalizedString("Please enter ID", bundle: R.hostingBundle, value: "Please enter ID", comment: "")
      }
      
      /// Base translation: Please enter access times
      /// 
      /// Locales: zh-Hant, Base
      static func pleaseEnterAccessTimes(_: Void = ()) -> String {
        return NSLocalizedString("Please enter access times", bundle: R.hostingBundle, value: "Please enter access times", comment: "")
      }
      
      /// Base translation: Please enter password
      /// 
      /// Locales: zh-Hant, Base
      static func pleaseEnterPassword(_: Void = ()) -> String {
        return NSLocalizedString("Please enter password", bundle: R.hostingBundle, value: "Please enter password", comment: "")
      }
      
      /// Base translation: Please enter the number of seconds
      /// 
      /// Locales: zh-Hant, Base
      static func pleaseEnterTheNumberOfSeconds(_: Void = ()) -> String {
        return NSLocalizedString("Please enter the number of seconds", bundle: R.hostingBundle, value: "Please enter the number of seconds", comment: "")
      }
      
      /// Base translation: Please press "Next" to continue
      /// 
      /// Locales: zh-Hant, Base
      static func pleasePressNextToContinue(_: Void = ()) -> String {
        return NSLocalizedString("Please press Next to continue", bundle: R.hostingBundle, value: "Please press \"Next\" to continue", comment: "")
      }
      
      /// Base translation: Please wait a moment…
      /// 
      /// Locales: zh-Hant, Base
      static func pleaseWaitAMoment(_: Void = ()) -> String {
        return NSLocalizedString("Please wait a moment…", bundle: R.hostingBundle, value: "Please wait a moment…", comment: "")
      }
      
      /// Base translation: Proximity Read Range
      /// 
      /// Locales: zh-Hant, Base
      static func pleaseSettingProximityReadRange(_: Void = ()) -> String {
        return NSLocalizedString("Please Setting Proximity Read Range", bundle: R.hostingBundle, value: "Proximity Read Range", comment: "")
      }
      
      /// Base translation: Proximity Read Range
      /// 
      /// Locales: zh-Hant, Base
      static func proximityReadRange(_: Void = ()) -> String {
        return NSLocalizedString("Proximity Read Range", bundle: R.hostingBundle, value: "Proximity Read Range", comment: "")
      }
      
      /// Base translation: Proximity Read Range
      /// 
      /// Locales: zh-Hant, Base
      static func proximityReadRangeSettings(_: Void = ()) -> String {
        return NSLocalizedString("Proximity Read Range Settings", bundle: R.hostingBundle, value: "Proximity Read Range", comment: "")
      }
      
      /// Base translation: Recurrent
      /// 
      /// Locales: zh-Hant, Base
      static func recurrent(_: Void = ()) -> String {
        return NSLocalizedString("Recurrent", bundle: R.hostingBundle, value: "Recurrent", comment: "")
      }
      
      /// Base translation: Repeat
      /// 
      /// Locales: zh-Hant, Base
      static func `repeat`(_: Void = ()) -> String {
        return NSLocalizedString("Repeat", bundle: R.hostingBundle, value: "Repeat", comment: "")
      }
      
      /// Base translation: Repeat
      /// 
      /// Locales: zh-Hant, Base
      static func repeatSelect(_: Void = ()) -> String {
        return NSLocalizedString("Repeat Select", bundle: R.hostingBundle, value: "Repeat", comment: "")
      }
      
      /// Base translation: Restore
      /// 
      /// Locales: zh-Hant, Base
      static func restore(_: Void = ()) -> String {
        return NSLocalizedString("Restore", bundle: R.hostingBundle, value: "Restore", comment: "")
      }
      
      /// Base translation: Restore Completed!
      /// 
      /// Locales: zh-Hant, Base
      static func restore_completed(_: Void = ()) -> String {
        return NSLocalizedString("restore_completed", bundle: R.hostingBundle, value: "Restore Completed!", comment: "")
      }
      
      /// Base translation: Restore Device Data
      /// 
      /// Locales: zh-Hant, Base
      static func restore_dialog_title(_: Void = ()) -> String {
        return NSLocalizedString("restore_dialog_title", bundle: R.hostingBundle, value: "Restore Device Data", comment: "")
      }
      
      /// Base translation: Restore Done
      /// 
      /// Locales: zh-Hant, Base
      static func restoreDone(_: Void = ()) -> String {
        return NSLocalizedString("Restore Done", bundle: R.hostingBundle, value: "Restore Done", comment: "")
      }
      
      /// Base translation: Restore Status
      /// 
      /// Locales: zh-Hant, Base
      static func restore_status(_: Void = ()) -> String {
        return NSLocalizedString("restore_status", bundle: R.hostingBundle, value: "Restore Status", comment: "")
      }
      
      /// Base translation: Restore all data now?
      /// 
      /// Locales: zh-Hant, Base
      static func restoreAllDataNow(_: Void = ()) -> String {
        return NSLocalizedString("Restore all data now?", bundle: R.hostingBundle, value: "Restore all data now?", comment: "")
      }
      
      /// Base translation: Restoring...
      /// 
      /// Locales: zh-Hant, Base
      static func restore_dialog_message(_: Void = ()) -> String {
        return NSLocalizedString("restore_dialog_message", bundle: R.hostingBundle, value: "Restoring...", comment: "")
      }
      
      /// Base translation: Restoring…
      /// 
      /// Locales: zh-Hant, Base
      static func restoring(_: Void = ()) -> String {
        return NSLocalizedString("Restoring…", bundle: R.hostingBundle, value: "Restoring…", comment: "")
      }
      
      /// Base translation: Saturday
      /// 
      /// Locales: zh-Hant, Base
      static func saturday(_: Void = ()) -> String {
        return NSLocalizedString("Saturday", bundle: R.hostingBundle, value: "Saturday", comment: "")
      }
      
      /// Base translation: Schedule
      /// 
      /// Locales: zh-Hant, Base
      static func schedule(_: Void = ()) -> String {
        return NSLocalizedString("Schedule", bundle: R.hostingBundle, value: "Schedule", comment: "")
      }
      
      /// Base translation: Search
      /// 
      /// Locales: zh-Hant, Base
      static func search(_: Void = ()) -> String {
        return NSLocalizedString("Search", bundle: R.hostingBundle, value: "Search", comment: "")
      }
      
      /// Base translation: Search result
      /// 
      /// Locales: zh-Hant, Base
      static func searchResult(_: Void = ()) -> String {
        return NSLocalizedString("Search result", bundle: R.hostingBundle, value: "Search result", comment: "")
      }
      
      /// Base translation: Sec.
      /// 
      /// Locales: zh-Hant, Base
      static func sec(_: Void = ()) -> String {
        return NSLocalizedString("Sec.", bundle: R.hostingBundle, value: "Sec.", comment: "")
      }
      
      /// Base translation: Settings
      /// 
      /// Locales: zh-Hant, Base
      static func settings(_: Void = ()) -> String {
        return NSLocalizedString("Settings", bundle: R.hostingBundle, value: "Settings", comment: "")
      }
      
      /// Base translation: Skip
      /// 
      /// Locales: zh-Hant, Base
      static func skip(_: Void = ()) -> String {
        return NSLocalizedString("Skip", bundle: R.hostingBundle, value: "Skip", comment: "")
      }
      
      /// Base translation: Start
      /// 
      /// Locales: zh-Hant, Base
      static func start(_: Void = ()) -> String {
        return NSLocalizedString("Start", bundle: R.hostingBundle, value: "Start", comment: "")
      }
      
      /// Base translation: Sucess
      /// 
      /// Locales: zh-Hant, Base
      static func program_success(_: Void = ()) -> String {
        return NSLocalizedString("program_success", bundle: R.hostingBundle, value: "Sucess", comment: "")
      }
      
      /// Base translation: Sunday
      /// 
      /// Locales: zh-Hant, Base
      static func sunday(_: Void = ()) -> String {
        return NSLocalizedString("Sunday", bundle: R.hostingBundle, value: "Sunday", comment: "")
      }
      
      /// Base translation: System busy!!
      /// 
      /// Locales: zh-Hant, Base
      static func users_manage_edit_status_busy(_: Void = ()) -> String {
        return NSLocalizedString("users_manage_edit_status_busy", bundle: R.hostingBundle, value: "System busy!!", comment: "")
      }
      
      /// Base translation: TYPES
      /// 
      /// Locales: zh-Hant, Base
      static func tYPES(_: Void = ()) -> String {
        return NSLocalizedString("TYPES", bundle: R.hostingBundle, value: "TYPES", comment: "")
      }
      
      /// Base translation: Tamper Sensor
      /// 
      /// Locales: zh-Hant, Base
      static func tamperSensor(_: Void = ()) -> String {
        return NSLocalizedString("Tamper Sensor", bundle: R.hostingBundle, value: "Tamper Sensor", comment: "")
      }
      
      /// Base translation: There's no users, add now?
      /// 
      /// Locales: zh-Hant, Base
      static func thereSNoUsersAddNow(_: Void = ()) -> String {
        return NSLocalizedString("There's no users, add now?", bundle: R.hostingBundle, value: "There's no users, add now?", comment: "")
      }
      
      /// Base translation: Thursday
      /// 
      /// Locales: zh-Hant, Base
      static func thursday(_: Void = ()) -> String {
        return NSLocalizedString("Thursday", bundle: R.hostingBundle, value: "Thursday", comment: "")
      }
      
      /// Base translation: Time
      /// 
      /// Locales: zh-Hant, Base
      static func timeIn(_: Void = ()) -> String {
        return NSLocalizedString("Time in", bundle: R.hostingBundle, value: "Time", comment: "")
      }
      
      /// Base translation: Tuesday
      /// 
      /// Locales: zh-Hant, Base
      static func tuesday(_: Void = ()) -> String {
        return NSLocalizedString("Tuesday", bundle: R.hostingBundle, value: "Tuesday", comment: "")
      }
      
      /// Base translation: Up to 16 characters
      /// 
      /// Locales: zh-Hant, Base
      static func pleaseProvideUpTo16Characters(_: Void = ()) -> String {
        return NSLocalizedString("Please Provide Up to 16 characters", bundle: R.hostingBundle, value: "Up to 16 characters", comment: "")
      }
      
      /// Base translation: Up to 16 characters
      /// 
      /// Locales: zh-Hant, Base
      static func upTo16Characters(_: Void = ()) -> String {
        return NSLocalizedString("Up to 16 characters", bundle: R.hostingBundle, value: "Up to 16 characters", comment: "")
      }
      
      /// Base translation: Use Re-lock Time
      /// 
      /// Locales: zh-Hant, Base
      static func useReLockTime(_: Void = ()) -> String {
        return NSLocalizedString("Use Re-lock Time", bundle: R.hostingBundle, value: "Use Re-lock Time", comment: "")
      }
      
      /// Base translation: User Info
      /// 
      /// Locales: zh-Hant, Base
      static func userInfo(_: Void = ()) -> String {
        return NSLocalizedString("User Info", bundle: R.hostingBundle, value: "User Info", comment: "")
      }
      
      /// Base translation: Users
      /// 
      /// Locales: zh-Hant, Base
      static func users(_: Void = ()) -> String {
        return NSLocalizedString("Users", bundle: R.hostingBundle, value: "Users", comment: "")
      }
      
      /// Base translation: Wednesday
      /// 
      /// Locales: zh-Hant, Base
      static func wednesday(_: Void = ()) -> String {
        return NSLocalizedString("Wednesday", bundle: R.hostingBundle, value: "Wednesday", comment: "")
      }
      
      /// Base translation: Welcome
      /// 
      /// Locales: zh-Hant, Base
      static func welcome(_: Void = ()) -> String {
        return NSLocalizedString("Welcome", bundle: R.hostingBundle, value: "Welcome", comment: "")
      }
      
      /// Base translation: You can find default password from the manual. Please change your Admin password for security control.
      /// 
      /// Locales: zh-Hant, Base
      static func youCanFindDefaultPasswordFromTheManualPleaseChangeYourAdminPasswordForSecurityControl(_: Void = ()) -> String {
        return NSLocalizedString("You can find default password from the manual. Please change your Admin password for security control.", bundle: R.hostingBundle, value: "You can find default password from the manual. Please change your Admin password for security control.", comment: "")
      }
      
      /// Base translation: You must connect to a Bluetooth device to set up
      /// 
      /// Locales: zh-Hant, Base
      static func youMustConnectToABluetoothDeviceToSetUp(_: Void = ()) -> String {
        return NSLocalizedString("You must connect to a Bluetooth device to set up", bundle: R.hostingBundle, value: "You must connect to a Bluetooth device to set up", comment: "")
      }
      
      /// Base translation: Your ID
      /// 
      /// Locales: zh-Hant, Base
      static func yourID(_: Void = ()) -> String {
        return NSLocalizedString("Your ID", bundle: R.hostingBundle, value: "Your ID", comment: "")
      }
      
      /// Base translation: [FRI]
      /// 
      /// Locales: zh-Hant, Base
      static func weekly_Fri(_: Void = ()) -> String {
        return NSLocalizedString("weekly_Fri", bundle: R.hostingBundle, value: "[FRI]", comment: "")
      }
      
      /// Base translation: [MON]
      /// 
      /// Locales: zh-Hant, Base
      static func weekly_Mon(_: Void = ()) -> String {
        return NSLocalizedString("weekly_Mon", bundle: R.hostingBundle, value: "[MON]", comment: "")
      }
      
      /// Base translation: [SAT]
      /// 
      /// Locales: zh-Hant, Base
      static func weekly_Sat(_: Void = ()) -> String {
        return NSLocalizedString("weekly_Sat", bundle: R.hostingBundle, value: "[SAT]", comment: "")
      }
      
      /// Base translation: [SUN]
      /// 
      /// Locales: zh-Hant, Base
      static func weekly_Sun(_: Void = ()) -> String {
        return NSLocalizedString("weekly_Sun", bundle: R.hostingBundle, value: "[SUN]", comment: "")
      }
      
      /// Base translation: [THU]
      /// 
      /// Locales: zh-Hant, Base
      static func weekly_Thu(_: Void = ()) -> String {
        return NSLocalizedString("weekly_Thu", bundle: R.hostingBundle, value: "[THU]", comment: "")
      }
      
      /// Base translation: [TUE]
      /// 
      /// Locales: zh-Hant, Base
      static func weekly_Tue(_: Void = ()) -> String {
        return NSLocalizedString("weekly_Tue", bundle: R.hostingBundle, value: "[TUE]", comment: "")
      }
      
      /// Base translation: [WED]
      /// 
      /// Locales: zh-Hant, Base
      static func weekly_Wed(_: Void = ()) -> String {
        return NSLocalizedString("weekly_Wed", bundle: R.hostingBundle, value: "[WED]", comment: "")
      }
      
      /// Base translation: please try later
      /// 
      /// Locales: zh-Hant, Base
      static func pleaseTryLater(_: Void = ()) -> String {
        return NSLocalizedString("please try later", bundle: R.hostingBundle, value: "please try later", comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _Intro_NOUsersViewController.validate()
      try _UsersTableViewCell.validate()
      try _AboutUsViewController.validate()
    }
    
    struct _AboutUsViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AboutUsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "anxell_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'anxell_logo' is used in nib 'AboutUsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_email", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_email' is used in nib 'AboutUsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_version", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_version' is used in nib 'AboutUsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_website", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_website' is used in nib 'AboutUsViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AccessTimesTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AccessTimesTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "accessTimesCell"
      let name = "AccessTimesTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AccessTimesTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccessTimesTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _AccessTypesViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AccessTypesViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ActivityHistoryTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ActivityHistoryTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "activityHistoryCell"
      let name = "ActivityHistoryTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ActivityHistoryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActivityHistoryTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ActivityHistoryViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ActivityHistoryViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AddUserViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddUserViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _DatePickerTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DatePickerTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "datePickerCell"
      let name = "DatePickerTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DatePickerTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DatePickerTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _DateTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DateTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "dateCell"
      let name = "DateTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DateTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DateTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _DeviceTimeSwitchTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DeviceTimeSwitchTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "deviceTimeSwitchCell"
      let name = "DeviceTimeSwitchTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DeviceTimeSwitchTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DeviceTimeSwitchTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _DeviceTimeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DeviceTimeViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _DoorLockActionViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DoorLockActionViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _DoorReLockTimeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DoorRe-lockTimeViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _Intro_AddMoreUserFooterView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "Intro_AddMoreUserFooterView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> Intro_AddMoreUserFooterView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Intro_AddMoreUserFooterView
      }
      
      fileprivate init() {}
    }
    
    struct _Intro_AddMoreUserViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "Intro_AddMoreUserViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _Intro_NOUsersViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Intro_NOUsersViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "users-list", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'users-list' is used in nib 'Intro_NOUsersViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ProximityReadRangeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProximityReadRangeViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _RepeatDateViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RepeatDateViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _RepeatTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RepeatTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "repeatCell"
      let name = "RepeatTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RepeatTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RepeatTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SettingsTableViewSectionFooter: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SettingsTableViewSectionFooter
      
      let bundle = R.hostingBundle
      let identifier = "settingsSectionFooter"
      let name = "SettingsTableViewSectionFooter"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SettingsTableViewSectionFooter? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsTableViewSectionFooter
      }
      
      fileprivate init() {}
    }
    
    struct _UserProximityReadRangeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UserProximityReadRangeViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _UsersTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UsersTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "usersCell"
      let name = "UsersTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UsersTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UsersTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "disclosure Indicator", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'disclosure Indicator' is used in nib 'UsersTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try intro.validate()
      try launchScreen.validate()
    }
    
    struct intro: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = IntroNavigationController
      
      let bundle = R.hostingBundle
      let introNavigationController = StoryboardViewControllerResource<IntroNavigationController>(identifier: "IntroNavigationController")
      let intro_DistanceSettingsViewController = StoryboardViewControllerResource<Intro_DistanceSettingsViewController>(identifier: "Intro_DistanceSettingsViewController")
      let intro_PasswordViewController = StoryboardViewControllerResource<Intro_PasswordViewController>(identifier: "Intro_PasswordViewController")
      let intro_UserViewController = StoryboardViewControllerResource<Intro_UserViewController>(identifier: "Intro_UserViewController")
      let intro_WelcomeViewController = StoryboardViewControllerResource<Intro_WelcomeViewController>(identifier: "Intro_WelcomeViewController")
      let name = "Intro"
      
      func introNavigationController(_: Void = ()) -> IntroNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: introNavigationController)
      }
      
      func intro_DistanceSettingsViewController(_: Void = ()) -> Intro_DistanceSettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: intro_DistanceSettingsViewController)
      }
      
      func intro_PasswordViewController(_: Void = ()) -> Intro_PasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: intro_PasswordViewController)
      }
      
      func intro_UserViewController(_: Void = ()) -> Intro_UserViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: intro_UserViewController)
      }
      
      func intro_WelcomeViewController(_: Void = ()) -> Intro_WelcomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: intro_WelcomeViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "triangle") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'triangle' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "loading-green") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'loading-green' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bluetooth") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bluetooth' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "slid-dot-1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'slid-dot-1' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "slid-dot-3") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'slid-dot-3' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn-green") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn-green' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "green-dot") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'green-dot' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "slid-dot-4") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'slid-dot-4' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn-gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn-gray' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plants") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants' is used in storyboard 'Intro', but couldn't be loaded.") }
        if _R.storyboard.intro().intro_UserViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'intro_UserViewController' could not be loaded from storyboard 'Intro' as 'Intro_UserViewController'.") }
        if _R.storyboard.intro().intro_WelcomeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'intro_WelcomeViewController' could not be loaded from storyboard 'Intro' as 'Intro_WelcomeViewController'.") }
        if _R.storyboard.intro().intro_DistanceSettingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'intro_DistanceSettingsViewController' could not be loaded from storyboard 'Intro' as 'Intro_DistanceSettingsViewController'.") }
        if _R.storyboard.intro().introNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'introNavigationController' could not be loaded from storyboard 'Intro' as 'IntroNavigationController'.") }
        if _R.storyboard.intro().intro_PasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'intro_PasswordViewController' could not be loaded from storyboard 'Intro' as 'Intro_PasswordViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "launch-screen-door") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch-screen-door' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HomeNavigationController
      
      let bundle = R.hostingBundle
      let homeNavigationController = StoryboardViewControllerResource<HomeNavigationController>(identifier: "HomeNavigationController")
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let name = "Main"
      let settingsTableViewController = StoryboardViewControllerResource<SettingsTableViewController>(identifier: "SettingsTableViewController")
      let userInfoTableViewController = StoryboardViewControllerResource<UserInfoTableViewController>(identifier: "UserInfoTableViewController")
      let usersViewController = StoryboardViewControllerResource<UsersViewController>(identifier: "UsersViewController")
      
      func homeNavigationController(_: Void = ()) -> HomeNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeNavigationController)
      }
      
      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }
      
      func settingsTableViewController(_: Void = ()) -> SettingsTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsTableViewController)
      }
      
      func userInfoTableViewController(_: Void = ()) -> UserInfoTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userInfoTableViewController)
      }
      
      func usersViewController(_: Void = ()) -> UsersViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: usersViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "backup") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backup' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "door-close") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'door-close' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn-green") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn-green' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "green-dot") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'green-dot' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "loading-white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'loading-white' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "history") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'history' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-btn-left") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-btn-left' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "triangle") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'triangle' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkbox-none") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox-none' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Back Chevron") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back Chevron' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "revert") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'revert' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "relogin") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'relogin' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "setup") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'setup' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plants") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().homeNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeNavigationController' could not be loaded from storyboard 'Main' as 'HomeNavigationController'.") }
        if _R.storyboard.main().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
        if _R.storyboard.main().userInfoTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userInfoTableViewController' could not be loaded from storyboard 'Main' as 'UserInfoTableViewController'.") }
        if _R.storyboard.main().settingsTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsTableViewController' could not be loaded from storyboard 'Main' as 'SettingsTableViewController'.") }
        if _R.storyboard.main().usersViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'usersViewController' could not be loaded from storyboard 'Main' as 'UsersViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
