//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Montserrat-Regular.ttf`.
    static let montserratRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Regular", pathExtension: "ttf")
    
    /// `bundle.url(forResource: "Montserrat-Regular", withExtension: "ttf")`
    static func montserratRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `Montserrat-Regular`.
    static let montserratRegular = Rswift.FontResource(fontName: "Montserrat-Regular")
    
    /// `UIFont(name: "Montserrat-Regular", size: ...)`
    static func montserratRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratRegular, size: size)
    }
    
    static func validate() throws {
      if R.font.montserratRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Regular' could not be loaded, is 'Montserrat-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 36 images.
  struct image {
    /// Image `Back Chevron`.
    static let backChevron = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back Chevron")
    /// Image `anxell_logo`.
    static let anxell_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "anxell_logo")
    /// Image `backup`.
    static let backup = Rswift.ImageResource(bundle: R.hostingBundle, name: "backup")
    /// Image `bluetooth`.
    static let bluetooth = Rswift.ImageResource(bundle: R.hostingBundle, name: "bluetooth")
    /// Image `btn-gray`.
    static let btnGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn-gray")
    /// Image `btn-green`.
    static let btnGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn-green")
    /// Image `checkbox-none`.
    static let checkboxNone = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox-none")
    /// Image `checkbox-tick`.
    static let checkboxTick = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox-tick")
    /// Image `disclosure Indicator`.
    static let disclosureIndicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "disclosure Indicator")
    /// Image `door-close`.
    static let doorClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "door-close")
    /// Image `door-open`.
    static let doorOpen = Rswift.ImageResource(bundle: R.hostingBundle, name: "door-open")
    /// Image `export`.
    static let export = Rswift.ImageResource(bundle: R.hostingBundle, name: "export")
    /// Image `green-dot`.
    static let greenDot = Rswift.ImageResource(bundle: R.hostingBundle, name: "green-dot")
    /// Image `history`.
    static let history = Rswift.ImageResource(bundle: R.hostingBundle, name: "history")
    /// Image `icon_email`.
    static let icon_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_email")
    /// Image `icon_version`.
    static let icon_version = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_version")
    /// Image `icon_website`.
    static let icon_website = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_website")
    /// Image `launch-screen-door`.
    static let launchScreenDoor = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch-screen-door")
    /// Image `launch-screen`.
    static let launchScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch-screen")
    /// Image `loading-green`.
    static let loadingGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "loading-green")
    /// Image `loading-white`.
    static let loadingWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "loading-white")
    /// Image `plants`.
    static let plants = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants")
    /// Image `research-green`.
    static let researchGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "research-green")
    /// Image `research-white`.
    static let researchWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "research-white")
    /// Image `revert`.
    static let revert = Rswift.ImageResource(bundle: R.hostingBundle, name: "revert")
    /// Image `setup`.
    static let setup = Rswift.ImageResource(bundle: R.hostingBundle, name: "setup")
    /// Image `slid-dot-1`.
    static let slidDot1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slid-dot-1")
    /// Image `slid-dot-2`.
    static let slidDot2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slid-dot-2")
    /// Image `slid-dot-3`.
    static let slidDot3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slid-dot-3")
    /// Image `slid-dot-4`.
    static let slidDot4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "slid-dot-4")
    /// Image `tick-green`.
    static let tickGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "tick-green")
    /// Image `tick-white-s`.
    static let tickWhiteS = Rswift.ImageResource(bundle: R.hostingBundle, name: "tick-white-s")
    /// Image `tick-white`.
    static let tickWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "tick-white")
    /// Image `triangle`.
    static let triangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "triangle")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")
    /// Image `users-list`.
    static let usersList = Rswift.ImageResource(bundle: R.hostingBundle, name: "users-list")
    
    /// `UIImage(named: "Back Chevron", bundle: ..., traitCollection: ...)`
    static func backChevron(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backChevron, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "anxell_logo", bundle: ..., traitCollection: ...)`
    static func anxell_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.anxell_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backup", bundle: ..., traitCollection: ...)`
    static func backup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backup, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bluetooth", bundle: ..., traitCollection: ...)`
    static func bluetooth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bluetooth, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn-gray", bundle: ..., traitCollection: ...)`
    static func btnGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnGray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn-green", bundle: ..., traitCollection: ...)`
    static func btnGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnGreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox-none", bundle: ..., traitCollection: ...)`
    static func checkboxNone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkboxNone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox-tick", bundle: ..., traitCollection: ...)`
    static func checkboxTick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkboxTick, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "disclosure Indicator", bundle: ..., traitCollection: ...)`
    static func disclosureIndicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.disclosureIndicator, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "door-close", bundle: ..., traitCollection: ...)`
    static func doorClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doorClose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "door-open", bundle: ..., traitCollection: ...)`
    static func doorOpen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doorOpen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "export", bundle: ..., traitCollection: ...)`
    static func export(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.export, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "green-dot", bundle: ..., traitCollection: ...)`
    static func greenDot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenDot, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "history", bundle: ..., traitCollection: ...)`
    static func history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.history, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_email", bundle: ..., traitCollection: ...)`
    static func icon_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_email, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_version", bundle: ..., traitCollection: ...)`
    static func icon_version(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_version, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_website", bundle: ..., traitCollection: ...)`
    static func icon_website(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_website, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch-screen", bundle: ..., traitCollection: ...)`
    static func launchScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchScreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch-screen-door", bundle: ..., traitCollection: ...)`
    static func launchScreenDoor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchScreenDoor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loading-green", bundle: ..., traitCollection: ...)`
    static func loadingGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loadingGreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loading-white", bundle: ..., traitCollection: ...)`
    static func loadingWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loadingWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "plants", bundle: ..., traitCollection: ...)`
    static func plants(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "research-green", bundle: ..., traitCollection: ...)`
    static func researchGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.researchGreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "research-white", bundle: ..., traitCollection: ...)`
    static func researchWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.researchWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "revert", bundle: ..., traitCollection: ...)`
    static func revert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.revert, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "setup", bundle: ..., traitCollection: ...)`
    static func setup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setup, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "slid-dot-1", bundle: ..., traitCollection: ...)`
    static func slidDot1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slidDot1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "slid-dot-2", bundle: ..., traitCollection: ...)`
    static func slidDot2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slidDot2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "slid-dot-3", bundle: ..., traitCollection: ...)`
    static func slidDot3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slidDot3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "slid-dot-4", bundle: ..., traitCollection: ...)`
    static func slidDot4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slidDot4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tick-green", bundle: ..., traitCollection: ...)`
    static func tickGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tickGreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tick-white", bundle: ..., traitCollection: ...)`
    static func tickWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tickWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tick-white-s", bundle: ..., traitCollection: ...)`
    static func tickWhiteS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tickWhiteS, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "triangle", bundle: ..., traitCollection: ...)`
    static func triangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.triangle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "users-list", bundle: ..., traitCollection: ...)`
    static func usersList(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.usersList, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 19 nibs.
  struct nib {
    /// Nib `AboutUsViewController`.
    static let aboutUsViewController = _R.nib._AboutUsViewController()
    /// Nib `AccessTimesTableViewCell`.
    static let accessTimesTableViewCell = _R.nib._AccessTimesTableViewCell()
    /// Nib `AccessTypesViewController`.
    static let accessTypesViewController = _R.nib._AccessTypesViewController()
    /// Nib `ActivityHistoryTableViewCell`.
    static let activityHistoryTableViewCell = _R.nib._ActivityHistoryTableViewCell()
    /// Nib `ActivityHistoryViewController`.
    static let activityHistoryViewController = _R.nib._ActivityHistoryViewController()
    /// Nib `AddUserViewController`.
    static let addUserViewController = _R.nib._AddUserViewController()
    /// Nib `DatePickerTableViewCell`.
    static let datePickerTableViewCell = _R.nib._DatePickerTableViewCell()
    /// Nib `DateTableViewCell`.
    static let dateTableViewCell = _R.nib._DateTableViewCell()
    /// Nib `DeviceTimeSwitchTableViewCell`.
    static let deviceTimeSwitchTableViewCell = _R.nib._DeviceTimeSwitchTableViewCell()
    /// Nib `DeviceTimeViewController`.
    static let deviceTimeViewController = _R.nib._DeviceTimeViewController()
    /// Nib `DoorLockActionViewController`.
    static let doorLockActionViewController = _R.nib._DoorLockActionViewController()
    /// Nib `DoorRe-lockTimeViewController`.
    static let doorReLockTimeViewController = _R.nib._DoorReLockTimeViewController()
    /// Nib `Intro_AddMoreUserFooterView`.
    static let intro_AddMoreUserFooterView = _R.nib._Intro_AddMoreUserFooterView()
    /// Nib `Intro_AddMoreUserViewController`.
    static let intro_AddMoreUserViewController = _R.nib._Intro_AddMoreUserViewController()
    /// Nib `Intro_NOUsersViewController`.
    static let intro_NOUsersViewController = _R.nib._Intro_NOUsersViewController()
    /// Nib `ProximityReadRangeViewController`.
    static let proximityReadRangeViewController = _R.nib._ProximityReadRangeViewController()
    /// Nib `RepeatDateViewController`.
    static let repeatDateViewController = _R.nib._RepeatDateViewController()
    /// Nib `SettingsTableViewSectionFooter`.
    static let settingsTableViewSectionFooter = _R.nib._SettingsTableViewSectionFooter()
    /// Nib `UsersTableViewCell`.
    static let usersTableViewCell = _R.nib._UsersTableViewCell()
    
    /// `UINib(name: "AboutUsViewController", in: bundle)`
    static func aboutUsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aboutUsViewController)
    }
    
    /// `UINib(name: "AccessTimesTableViewCell", in: bundle)`
    static func accessTimesTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accessTimesTableViewCell)
    }
    
    /// `UINib(name: "AccessTypesViewController", in: bundle)`
    static func accessTypesViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accessTypesViewController)
    }
    
    /// `UINib(name: "ActivityHistoryTableViewCell", in: bundle)`
    static func activityHistoryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.activityHistoryTableViewCell)
    }
    
    /// `UINib(name: "ActivityHistoryViewController", in: bundle)`
    static func activityHistoryViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.activityHistoryViewController)
    }
    
    /// `UINib(name: "AddUserViewController", in: bundle)`
    static func addUserViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addUserViewController)
    }
    
    /// `UINib(name: "DatePickerTableViewCell", in: bundle)`
    static func datePickerTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.datePickerTableViewCell)
    }
    
    /// `UINib(name: "DateTableViewCell", in: bundle)`
    static func dateTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dateTableViewCell)
    }
    
    /// `UINib(name: "DeviceTimeSwitchTableViewCell", in: bundle)`
    static func deviceTimeSwitchTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.deviceTimeSwitchTableViewCell)
    }
    
    /// `UINib(name: "DeviceTimeViewController", in: bundle)`
    static func deviceTimeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.deviceTimeViewController)
    }
    
    /// `UINib(name: "DoorLockActionViewController", in: bundle)`
    static func doorLockActionViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.doorLockActionViewController)
    }
    
    /// `UINib(name: "DoorRe-lockTimeViewController", in: bundle)`
    static func doorReLockTimeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.doorReLockTimeViewController)
    }
    
    /// `UINib(name: "Intro_AddMoreUserFooterView", in: bundle)`
    static func intro_AddMoreUserFooterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.intro_AddMoreUserFooterView)
    }
    
    /// `UINib(name: "Intro_AddMoreUserViewController", in: bundle)`
    static func intro_AddMoreUserViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.intro_AddMoreUserViewController)
    }
    
    /// `UINib(name: "Intro_NOUsersViewController", in: bundle)`
    static func intro_NOUsersViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.intro_NOUsersViewController)
    }
    
    /// `UINib(name: "ProximityReadRangeViewController", in: bundle)`
    static func proximityReadRangeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.proximityReadRangeViewController)
    }
    
    /// `UINib(name: "RepeatDateViewController", in: bundle)`
    static func repeatDateViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.repeatDateViewController)
    }
    
    /// `UINib(name: "SettingsTableViewSectionFooter", in: bundle)`
    static func settingsTableViewSectionFooter(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsTableViewSectionFooter)
    }
    
    /// `UINib(name: "UsersTableViewCell", in: bundle)`
    static func usersTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.usersTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 7 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `accessTimesCell`.
    static let accessTimesCell: Rswift.ReuseIdentifier<AccessTimesTableViewCell> = Rswift.ReuseIdentifier(identifier: "accessTimesCell")
    /// Reuse identifier `activityHistoryCell`.
    static let activityHistoryCell: Rswift.ReuseIdentifier<ActivityHistoryTableViewCell> = Rswift.ReuseIdentifier(identifier: "activityHistoryCell")
    /// Reuse identifier `dateCell`.
    static let dateCell: Rswift.ReuseIdentifier<DateTableViewCell> = Rswift.ReuseIdentifier(identifier: "dateCell")
    /// Reuse identifier `datePickerCell`.
    static let datePickerCell: Rswift.ReuseIdentifier<DatePickerTableViewCell> = Rswift.ReuseIdentifier(identifier: "datePickerCell")
    /// Reuse identifier `deviceTimeSwitchCell`.
    static let deviceTimeSwitchCell: Rswift.ReuseIdentifier<DeviceTimeSwitchTableViewCell> = Rswift.ReuseIdentifier(identifier: "deviceTimeSwitchCell")
    /// Reuse identifier `settingsSectionFooter`.
    static let settingsSectionFooter: Rswift.ReuseIdentifier<SettingsTableViewSectionFooter> = Rswift.ReuseIdentifier(identifier: "settingsSectionFooter")
    /// Reuse identifier `usersCell`.
    static let usersCell: Rswift.ReuseIdentifier<UsersTableViewCell> = Rswift.ReuseIdentifier(identifier: "usersCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 5 view controllers.
  struct segue {
    /// This struct is generated for `HomeViewController`, and contains static references to 1 segues.
    struct homeViewController {
      /// Segue identifier `showSettingsTableViewController`.
      static let showSettingsTableViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, SettingsTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSettingsTableViewController")
      
      /// Optionally returns a typed version of segue `showSettingsTableViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSettingsTableViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, SettingsTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.showSettingsTableViewController, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `Intro_UserViewController`, and contains static references to 1 segues.
    struct intro_UserViewController {
      /// Segue identifier `showIntro_DistanceSettingsViewController`.
      static let showIntro_DistanceSettingsViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, Intro_UserViewController, Intro_DistanceSettingsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showIntro_DistanceSettingsViewController")
      
      /// Optionally returns a typed version of segue `showIntro_DistanceSettingsViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showIntro_DistanceSettingsViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, Intro_UserViewController, Intro_DistanceSettingsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.intro_UserViewController.showIntro_DistanceSettingsViewController, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `Intro_WelcomeViewController`, and contains static references to 1 segues.
    struct intro_WelcomeViewController {
      /// Segue identifier `intro_Pass`.
      static let intro_Pass: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, Intro_WelcomeViewController, Intro_PasswordViewController> = Rswift.StoryboardSegueIdentifier(identifier: "intro_Pass")
      
      /// Optionally returns a typed version of segue `intro_Pass`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func intro_Pass(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, Intro_WelcomeViewController, Intro_PasswordViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.intro_WelcomeViewController.intro_Pass, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SettingsTableViewController`, and contains static references to 1 segues.
    struct settingsTableViewController {
      /// Segue identifier `showUserList`.
      static let showUserList: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingsTableViewController, UsersViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showUserList")
      
      /// Optionally returns a typed version of segue `showUserList`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showUserList(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingsTableViewController, UsersViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingsTableViewController.showUserList, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `UsersViewController`, and contains static references to 1 segues.
    struct usersViewController {
      /// Segue identifier `showUserInfoTableViewController`.
      static let showUserInfoTableViewController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UsersViewController, UserInfoTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showUserInfoTableViewController")
      
      /// Optionally returns a typed version of segue `showUserInfoTableViewController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showUserInfoTableViewController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UsersViewController, UserInfoTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.usersViewController.showUserInfoTableViewController, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `Intro`.
    static let intro = _R.storyboard.intro()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "Intro", bundle: ...)`
    static func intro(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.intro)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _Intro_NOUsersViewController.validate()
      try _UsersTableViewCell.validate()
      try _AboutUsViewController.validate()
    }
    
    struct _AboutUsViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AboutUsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "anxell_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'anxell_logo' is used in nib 'AboutUsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_email", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_email' is used in nib 'AboutUsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_version", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_version' is used in nib 'AboutUsViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_website", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_website' is used in nib 'AboutUsViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AccessTimesTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AccessTimesTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "accessTimesCell"
      let name = "AccessTimesTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AccessTimesTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccessTimesTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _AccessTypesViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AccessTypesViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ActivityHistoryTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ActivityHistoryTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "activityHistoryCell"
      let name = "ActivityHistoryTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ActivityHistoryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActivityHistoryTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ActivityHistoryViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ActivityHistoryViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _AddUserViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddUserViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _DatePickerTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DatePickerTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "datePickerCell"
      let name = "DatePickerTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DatePickerTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DatePickerTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _DateTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DateTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "dateCell"
      let name = "DateTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DateTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DateTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _DeviceTimeSwitchTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DeviceTimeSwitchTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "deviceTimeSwitchCell"
      let name = "DeviceTimeSwitchTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DeviceTimeSwitchTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DeviceTimeSwitchTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _DeviceTimeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DeviceTimeViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _DoorLockActionViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DoorLockActionViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _DoorReLockTimeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DoorRe-lockTimeViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _Intro_AddMoreUserFooterView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "Intro_AddMoreUserFooterView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> Intro_AddMoreUserFooterView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Intro_AddMoreUserFooterView
      }
      
      fileprivate init() {}
    }
    
    struct _Intro_AddMoreUserViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "Intro_AddMoreUserViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _Intro_NOUsersViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Intro_NOUsersViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "users-list", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'users-list' is used in nib 'Intro_NOUsersViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ProximityReadRangeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProximityReadRangeViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _RepeatDateViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RepeatDateViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SettingsTableViewSectionFooter: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SettingsTableViewSectionFooter
      
      let bundle = R.hostingBundle
      let identifier = "settingsSectionFooter"
      let name = "SettingsTableViewSectionFooter"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SettingsTableViewSectionFooter? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsTableViewSectionFooter
      }
      
      fileprivate init() {}
    }
    
    struct _UsersTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UsersTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "usersCell"
      let name = "UsersTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UsersTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UsersTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "disclosure Indicator", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'disclosure Indicator' is used in nib 'UsersTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try intro.validate()
      try launchScreen.validate()
    }
    
    struct intro: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = IntroNavigationController
      
      let bundle = R.hostingBundle
      let introNavigationController = StoryboardViewControllerResource<IntroNavigationController>(identifier: "IntroNavigationController")
      let intro_DistanceSettingsViewController = StoryboardViewControllerResource<Intro_DistanceSettingsViewController>(identifier: "Intro_DistanceSettingsViewController")
      let intro_PasswordViewController = StoryboardViewControllerResource<Intro_PasswordViewController>(identifier: "Intro_PasswordViewController")
      let intro_UserViewController = StoryboardViewControllerResource<Intro_UserViewController>(identifier: "Intro_UserViewController")
      let intro_WelcomeViewController = StoryboardViewControllerResource<Intro_WelcomeViewController>(identifier: "Intro_WelcomeViewController")
      let name = "Intro"
      
      func introNavigationController(_: Void = ()) -> IntroNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: introNavigationController)
      }
      
      func intro_DistanceSettingsViewController(_: Void = ()) -> Intro_DistanceSettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: intro_DistanceSettingsViewController)
      }
      
      func intro_PasswordViewController(_: Void = ()) -> Intro_PasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: intro_PasswordViewController)
      }
      
      func intro_UserViewController(_: Void = ()) -> Intro_UserViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: intro_UserViewController)
      }
      
      func intro_WelcomeViewController(_: Void = ()) -> Intro_WelcomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: intro_WelcomeViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "triangle") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'triangle' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "loading-green") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'loading-green' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bluetooth") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bluetooth' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "slid-dot-1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'slid-dot-1' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "slid-dot-3") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'slid-dot-3' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn-green") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn-green' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "green-dot") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'green-dot' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "slid-dot-4") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'slid-dot-4' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn-gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn-gray' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plants") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants' is used in storyboard 'Intro', but couldn't be loaded.") }
        if _R.storyboard.intro().intro_UserViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'intro_UserViewController' could not be loaded from storyboard 'Intro' as 'Intro_UserViewController'.") }
        if _R.storyboard.intro().intro_WelcomeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'intro_WelcomeViewController' could not be loaded from storyboard 'Intro' as 'Intro_WelcomeViewController'.") }
        if _R.storyboard.intro().intro_DistanceSettingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'intro_DistanceSettingsViewController' could not be loaded from storyboard 'Intro' as 'Intro_DistanceSettingsViewController'.") }
        if _R.storyboard.intro().introNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'introNavigationController' could not be loaded from storyboard 'Intro' as 'IntroNavigationController'.") }
        if _R.storyboard.intro().intro_PasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'intro_PasswordViewController' could not be loaded from storyboard 'Intro' as 'Intro_PasswordViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "launch-screen-door") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch-screen-door' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HomeNavigationController
      
      let bundle = R.hostingBundle
      let homeNavigationController = StoryboardViewControllerResource<HomeNavigationController>(identifier: "HomeNavigationController")
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let name = "Main"
      let settingsTableViewController = StoryboardViewControllerResource<SettingsTableViewController>(identifier: "SettingsTableViewController")
      let userInfoTableViewController = StoryboardViewControllerResource<UserInfoTableViewController>(identifier: "UserInfoTableViewController")
      let usersViewController = StoryboardViewControllerResource<UsersViewController>(identifier: "UsersViewController")
      
      func homeNavigationController(_: Void = ()) -> HomeNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeNavigationController)
      }
      
      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }
      
      func settingsTableViewController(_: Void = ()) -> SettingsTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsTableViewController)
      }
      
      func userInfoTableViewController(_: Void = ()) -> UserInfoTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userInfoTableViewController)
      }
      
      func usersViewController(_: Void = ()) -> UsersViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: usersViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "backup") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backup' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "door-close") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'door-close' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn-green") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn-green' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "green-dot") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'green-dot' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "loading-white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'loading-white' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "history") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'history' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back-btn-left") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back-btn-left' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "triangle") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'triangle' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkbox-none") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox-none' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Back Chevron") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back Chevron' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "revert") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'revert' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "setup") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'setup' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plants") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().homeNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeNavigationController' could not be loaded from storyboard 'Main' as 'HomeNavigationController'.") }
        if _R.storyboard.main().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
        if _R.storyboard.main().userInfoTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userInfoTableViewController' could not be loaded from storyboard 'Main' as 'UserInfoTableViewController'.") }
        if _R.storyboard.main().settingsTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsTableViewController' could not be loaded from storyboard 'Main' as 'SettingsTableViewController'.") }
        if _R.storyboard.main().usersViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'usersViewController' could not be loaded from storyboard 'Main' as 'UsersViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
